module DecodeAbi exposing (TestVal1, TestVal2, complexStorage, decodeInt, testVal1_decoder, testVal1_elm_data, testVal1_raw_data, testVal2_decoder, testVal2_elm_data, testVal2_raw_data)

-- import Fuzz exposing (Fuzzer, int, list, string)

import BigInt exposing (BigInt)
import Eth.Abi.Decode as Abi
import Eth.Types exposing (Hex)
import Eth.Utils exposing (hexToString)
import Expect
import Test exposing (..)
import Eth.Utils exposing (unsafeToHex)



-- Abi Decoders


decodeInt : Test
decodeInt =
    describe "Int Decoding"
        [ test "int with 1 at start" <|
            \_ ->
                Abi.fromString Abi.int "0x1000"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "4096")
        , test "zero int" <|
            \_ ->
                Abi.fromString Abi.int "0x0000000000000000000000000000000000000000000000000000000000000000"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "0")
        , test "int with 1 at end" <|
            \_ ->
                Abi.fromString Abi.int "0x0000000000000000000000000000000000000000000000000000000000000001"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "1")
        , test "int with all f's" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-1")
        , test "int 2" <|
            \_ ->
                Abi.fromString Abi.int "0x0000000000000000000000000000000000000000000000000000000000000002"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "2")
        , test "int -2" <|
            \_ ->
                Abi.fromString Abi.int "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-2")
        , test "int with letter at start" <|
            \_ ->
                Abi.fromString Abi.int "0x000000000000000000000000000000000000000000000000000000000000000a"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "10")
        , test "int -10" <|
            \_ ->
                Abi.fromString Abi.int "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-10")
        , test "int 11" <|
            \_ ->
                Abi.fromString Abi.int "0x000000000000000000000000000000000000000000000000000000000000000b"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "11")
        , test "int -11" <|
            \_ ->
                Abi.fromString Abi.int "0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-11")
        , test "max positive int8" <|
            \_ ->
                Abi.fromString Abi.int "0x000000000000000000000000000000000000000000000000000000000000007f"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "127")
        , test "int -127" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff81"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-127")
        , test "max negative int8" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-128")
        , test "max positive int16" <|
            \_ ->
                Abi.fromString Abi.int "0x0000000000000000000000000000000000000000000000000000000000007fff"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "32767")
        , test "int -32767" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8001"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-32767")
        , test "max negative int16" <|
            \_ ->
                Abi.fromString Abi.int "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8000"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-32768")
        , test "max positive int256" <|
            \_ ->
                Abi.fromString Abi.int "0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "57896044618658097711785492504343953926634992332820282019728792003956564819967")
        , test "max negative int256" <|
            \_ ->
                Abi.fromString Abi.int "0x8000000000000000000000000000000000000000000000000000000000000000"
                    |> Result.map BigInt.toString
                    |> Expect.equal (Ok "-57896044618658097711785492504343953926634992332820282019728792003956564819968")
        ]


complexStorage : Test
complexStorage =
    describe "Contract Call Decoding"
        [ test "decode ComplexStorage.test1()" <|
            \_ ->
                Abi.fromString testVal1_decoder testVal1_raw_data
                    |> Expect.equal testVal1_elm_data
        , test "decode ComplexStorage.test2()" <|
            \_ ->
                Abi.fromString testVal2_decoder testVal2_raw_data
                    |> Expect.equal testVal2_elm_data
        ]



-- Decoder and Data Helpers


testVal1_decoder : Abi.AbiDecoder TestVal1
testVal1_decoder =
    Abi.abiDecode TestVal1
        |> Abi.andMap Abi.uint
        |> Abi.andMap Abi.int
        |> Abi.andMap Abi.bool
        |> Abi.andMap Abi.int
        |> Abi.andMap (Abi.staticArray 2 Abi.bool)
        |> Abi.andMap (Abi.dynamicArray Abi.int)
        |> Abi.andMap (Abi.dynamicArray Abi.uint)
        |> Abi.andMap Abi.string
        |> Abi.andMap Abi.string
        |> Abi.andMap (Abi.staticBytes 16)
        |> Abi.andMap (Abi.dynamicArray (Abi.staticArray 4 (Abi.staticBytes 2)))
        |> Abi.andMap Abi.dynamicBytes


testVal2_decoder : Abi.AbiDecoder TestVal2
testVal2_decoder =
    Abi.abiDecode TestVal2
        |> Abi.andMap (Abi.dynamicArray (Abi.dynamicArray Abi.string))
        |> Abi.andMap (Abi.dynamicArray Abi.string)


testVal1_elm_data : Result String TestVal1
testVal1_elm_data =
    let
        b2Vec =
            [ "0x1234", "0x5678", "0xffff", "0x0000" ] |> List.map unsafeToHex

        v3Val =
            BigInt.fromIntString
                "-999999999999999999999999999999999999999999999999999999999999999"
                |> Result.fromMaybe "Error decoding bigInt in Tests.Abi.makeGetVals"

        makeGetVals : BigInt -> TestVal1
        makeGetVals bigNegativeInt =
            { uintVal = BigInt.fromInt 123
            , intVal = BigInt.fromInt -128
            , boolVal = True
            , int224Val = bigNegativeInt
            , boolVectorVal = [ True, False ]
            , intListVal =
                [ BigInt.fromInt 1
                , BigInt.fromInt 2
                , BigInt.fromInt 3
                , bigNegativeInt
                , BigInt.fromInt -10
                , BigInt.fromInt 1
                , BigInt.fromInt 2
                , BigInt.fromInt 34
                ]
            , emptyArray = []
            , stringVal = "wtf mate"
            , emptyString = ""
            , bytes16Val = unsafeToHex "0x31323334353637383930313233343536"
            , bytes2VectorListVal = [ b2Vec, b2Vec, b2Vec ]
            , emptyBytes = unsafeToHex "0x"
            }
    in
    Result.map makeGetVals v3Val


testVal2_elm_data : Result String TestVal2
testVal2_elm_data =
    Ok
        { dynArrayOfDynVal = [ [ "testingthisshouldbequiteabitlongerthan1word" ], [ "" ], [ "shorter" ], [ "s" ] ]
        , arrayOfString = [ "testingthisshouldbequiteabitlongerthan1word", "", "shorter", "s" ]
        }


type alias TestVal1 =
    { uintVal : BigInt
    , intVal : BigInt
    , boolVal : Bool
    , int224Val : BigInt
    , boolVectorVal : List Bool
    , intListVal : List BigInt
    , emptyArray : List BigInt
    , stringVal : String
    , emptyString : String
    , bytes16Val : Hex
    , bytes2VectorListVal : List (List Hex)
    , emptyBytes : Hex
    }


type alias TestVal2 =
    { dynArrayOfDynVal : List (List String)
    , arrayOfString : List String
    }


type alias TestVal3 =
    {}


testVal1_raw_data : String
testVal1_raw_data =
    "0x000000000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff800000000000000000000000000000000000000000000000000000000000000001fffffffffffd91b2cf1333cdea2270cea82d81dc5342301980000000000000010000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001a000000000000000000000000000000000000000000000000000000000000002c000000000000000000000000000000000000000000000000000000000000002e000000000000000000000000000000000000000000000000000000000000003203132333435363738393031323334353600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000004e00000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000003fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000008777466206d6174650000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000312340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012340000000000000000000000000000000000000000000000000000000000005678000000000000000000000000000000000000000000000000000000000000ffff00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000"


testVal2_raw_data : String
testVal2_raw_data =
    "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000002e00000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000001200000000000000000000000000000000000000000000000000000000000000180000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000002b74657374696e677468697373686f756c6462657175697465616269746c6f6e6765727468616e31776f726400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000773686fe000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000140000000000000000000000000000000000000000000000000000000000000002b74657374696e677468697373686f756c6462657175697465616269746c6f6e6765727468616e31776f72640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000773686f727465720000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000017300000000000000000000000000000000000000000000000000000000000000"


testVal3_raw_data : String
testVal3_raw_data =
    ""



-- testVal1_raw_data call
--
-- 000000000000000000000000000000000000000000000000000000000000007b - 0 -  uint
-- ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80 - 32 -  int
-- 0000000000000000000000000000000000000000000000000000000000000001 - 64 -  bool
-- fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001 - 96 -  int224
-- 0000000000000000000000000000000000000000000000000000000000000001 - 128 -  bool[2] (0)
-- 0000000000000000000000000000000000000000000000000000000000000000 - 160 -  bool[2] (1)
-- 00000000000000000000000000000000000000000000000000000000000001a0 - 192 -  int[] - intList pointer (416)
-- 00000000000000000000000000000000000000000000000000000000000002c0 - 224 -  uint[] - emptyArray pointer (704)
-- 00000000000000000000000000000000000000000000000000000000000002e0 - 256 -  string - stringVal pointer (736)
-- 0000000000000000000000000000000000000000000000000000000000000320 - 288 -  string - emptyString pointer (800)
-- 3132333435363738393031323334353600000000000000000000000000000000 - 320 -  bytes16
-- 0000000000000000000000000000000000000000000000000000000000000340 - 352 -  bytes2[4][] - bytes2VectorListVal pointer (832)
-- 00000000000000000000000000000000000000000000000000000000000004e0 - 384 -  string[] - arrayOfString pointer (1248)
-- 0000000000000000000000000000000000000000000000000000000000000008 - 416 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 448 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 480 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 512 -
-- fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001 - 544 -
-- fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6 - 576 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 608 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 640 -
-- 0000000000000000000000000000000000000000000000000000000000000022 - 672 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 704 - emptyArray (size 0)
-- 0000000000000000000000000000000000000000000000000000000000000008 - 736 -
-- 777466206d617465000000000000000000000000000000000000000000000000 - 768 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 800 - emptyString (size 0)
-- 0000000000000000000000000000000000000000000000000000000000000003 - 832 -
-- 1234000000000000000000000000000000000000000000000000000000000000 - 864 -
-- 5678000000000000000000000000000000000000000000000000000000000000 - 896 -
-- ffff000000000000000000000000000000000000000000000000000000000000 - 928 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 960 -
-- 1234000000000000000000000000000000000000000000000000000000000000 - 992 -
-- 5678000000000000000000000000000000000000000000000000000000000000 - 1024 -
-- ffff000000000000000000000000000000000000000000000000000000000000 - 1056 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 1088 -
-- 1234000000000000000000000000000000000000000000000000000000000000 - 1120 -
-- 5678000000000000000000000000000000000000000000000000000000000000 - 1152 -
-- ffff000000000000000000000000000000000000000000000000000000000000 - 1184 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 1216 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 1248 -
-- 0000000000000000000000000000000000000000000000000000000000000060 - 1280 -
-- 00000000000000000000000000000000000000000000000000000000000000c0 - 1312 -
-- 0000000000000000000000000000000000000000000000000000000000000100 - 1344 -
-- 000000000000000000000000000000000000000000000000000000000000002b - 1376 -
-- 74657374696e677468697373686f756c6462657175697465616269746c6f6e67 - 1408 -
-- 65727468616e31776f7264000000000000000000000000000000000000000000 - 1440 -
-- 0000000000000000000000000000000000000000000000000000000000000007 - 1472 -
-- 73686f7274657200000000000000000000000000000000000000000000000000 - 1504 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 1536 -
-- 7300000000000000000000000000000000000000000000000000000000000000 - 1568 -
-- 000000000000000000000000000000000000000000000000000000000000007b - 0 - uint
-- ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff80 - 32 - int
-- 0000000000000000000000000000000000000000000000000000000000000001 - 64 - bool
-- fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001 - 96 - int224
-- 0000000000000000000000000000000000000000000000000000000000000001 - 128 - bool[2] (0)
-- 0000000000000000000000000000000000000000000000000000000000000000 - 160 - bool[2] (1)
-- 0000000000000000000000000000000000000000000000000000000000000180 - 192 - int[] - intList pointer (384)
-- 00000000000000000000000000000000000000000000000000000000000002a0 - 224 - string - stringVal pointer (672)
-- 00000000000000000000000000000000000000000000000000000000000002e0 - 256 - string - emptyString pointer (736)
-- 3132333435363738393031323334353600000000000000000000000000000000 - 288 - bytes16
-- 0000000000000000000000000000000000000000000000000000000000000300 - 320 - bytes2[4][] - bytes2VectorListVal pointer (768)
-- 00000000000000000000000000000000000000000000000000000000000004a0 - 352 - string[] - arrayOfString pointer (1184)
-- 0000000000000000000000000000000000000000000000000000000000000008 - 384 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 416 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 448 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 480 -
-- fffffffffffd91b2cf1333cdea2270cea82d81dc534230198000000000000001 - 512 -
-- fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6 - 544 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 576 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 608 -
-- 0000000000000000000000000000000000000000000000000000000000000022 - 640 -
-- 0000000000000000000000000000000000000000000000000000000000000008 - 672 -
-- 777466206d617465000000000000000000000000000000000000000000000000 - 704 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 736 - emptyString (size 0)
-- 0000000000000000000000000000000000000000000000000000000000000003 - 768 - bytes2VectorListVal (size 3) (dynamic array of three 4-value static arrays of bytes2)
-- 1234000000000000000000000000000000000000000000000000000000000000 - 800 - bytes2VectorListVal[0][0]
-- 5678000000000000000000000000000000000000000000000000000000000000 - 832 - bytes2VectorListVal[0][1]
-- ffff000000000000000000000000000000000000000000000000000000000000 - 864 - bytes2VectorListVal[0][2]
-- 0000000000000000000000000000000000000000000000000000000000000000 - 896 - bytes2VectorListVal[0][3]
-- 1234000000000000000000000000000000000000000000000000000000000000 - 928 - bytes2VectorListVal[1][0]
-- 5678000000000000000000000000000000000000000000000000000000000000 - 960 - bytes2VectorListVal[1][1]
-- ffff000000000000000000000000000000000000000000000000000000000000 - 992 - bytes2VectorListVal[1][2]
-- 0000000000000000000000000000000000000000000000000000000000000000 - 1024 - bytes2VectorListVal[1][3]
-- 1234000000000000000000000000000000000000000000000000000000000000 - 1056 - bytes2VectorListVal[2][0]
-- 5678000000000000000000000000000000000000000000000000000000000000 - 1088 - bytes2VectorListVal[2][1]
-- ffff000000000000000000000000000000000000000000000000000000000000 - 1120 - bytes2VectorListVal[2][2]
-- 0000000000000000000000000000000000000000000000000000000000000000 - 1152 - bytes2VectorListVal[2][3]
-- 0000000000000000000000000000000000000000000000000000000000000003 - 1184 - arrayOfString (size 3)
-- 0000000000000000000000000000000000000000000000000000000000000060 - 1216 -
-- 00000000000000000000000000000000000000000000000000000000000000c0 - 1248 -
-- 0000000000000000000000000000000000000000000000000000000000000100 - 1280 -
-- 000000000000000000000000000000000000000000000000000000000000002b - 1312 -
-- 74657374696e677468697373686f756c6462657175697465616269746c6f6e67 - 1344 -
-- 65727468616e31776f7264000000000000000000000000000000000000000000 - 1376 -
-- 0000000000000000000000000000000000000000000000000000000000000007 - 1408 -
-- 73686f7274657200000000000000000000000000000000000000000000000000 - 1440 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 1472 -
-- 7300000000000000000000000000000000000000000000000000000000000000 - 1504 -
--
--
--
--
-- testVal2_raw_data data
--
-- 0000000000000000000000000000000000000000000000000000000000000040 - 0 - string[][] pointer (64)
-- 00000000000000000000000000000000000000000000000000000000000002e0 - 32 - string[] pointer (736)
-- 0000000000000000000000000000000000000000000000000000000000000004 - 64 - Dynamic array length of 4 -- START of string[][] data, first return value
-- 0000000000000000000000000000000000000000000000000000000000000080 - 96 (0)   - string[] inside of string[][], pointer (224 (128))
-- 0000000000000000000000000000000000000000000000000000000000000120 - 128 (32) - string[] inside of string[][], pointer (384 (288))
-- 0000000000000000000000000000000000000000000000000000000000000180 - 160 (64) - string[] inside of string[][], pointer (480 (384))
-- 0000000000000000000000000000000000000000000000000000000000000200 - 192 (96) - string[] inside of string[][], pointer (608 (512))
-- 0000000000000000000000000000000000000000000000000000000000000001 - 224 (128) - Dynamic array length of 1
-- 0000000000000000000000000000000000000000000000000000000000000020 - 256 (160) (0) - pointer to string[0] length
-- 000000000000000000000000000000000000000000000000000000000000002b - 288 (192) (32) - string length of 43 hex
-- 74657374696e677468697373686f756c6462657175697465616269746c6f6e67 - 320 (224) (64) - first 32 utf8 hex
-- 65727468616e31776f7264000000000000000000000000000000000000000000 - 352 (256) (96) - remaining 11 utf8 hex -- END OF FIRST STRING in string[][]
-- 0000000000000000000000000000000000000000000000000000000000000001 - 384 (288) - Dynamic array length of 1
-- 0000000000000000000000000000000000000000000000000000000000000020 - 416 (320) (0) - pointer to string[1] length
-- 0000000000000000000000000000000000000000000000000000000000000000 - 448 (352) (32) - string length of 0  -- END OF SECOND STRING in string[][]
-- 0000000000000000000000000000000000000000000000000000000000000001 - 480 (384) - Dynamic array length of 1
-- 0000000000000000000000000000000000000000000000000000000000000020 - 512 (416) (0) - pointer to string[2] length
-- 0000000000000000000000000000000000000000000000000000000000000007 - 544 (448) (32) - string length of 7 hex
-- 73686f7274657200000000000000000000000000000000000000000000000000 - 576 (480) (64) - 7 hex length utf8  -- END OF THIRD STRING in string[][]
-- 0000000000000000000000000000000000000000000000000000000000000001 - 608 (512) - Dynamic array length of 1
-- 0000000000000000000000000000000000000000000000000000000000000020 - 640 - pointer to string[3] length
-- 0000000000000000000000000000000000000000000000000000000000000001 - 672 - length of 1 hex
-- 7300000000000000000000000000000000000000000000000000000000000000 - 704 - 1 hex length string -- END OF FOURTH STRING in string[][]
-- 0000000000000000000000000000000000000000000000000000000000000004 - 736 - Dynamic array length of 4 -- START OF string[] data, second return value
-- 0000000000000000000000000000000000000000000000000000000000000080 - 768 -
-- 00000000000000000000000000000000000000000000000000000000000000e0 - 800 -
-- 0000000000000000000000000000000000000000000000000000000000000100 - 832 -
-- 0000000000000000000000000000000000000000000000000000000000000140 - 864 -
-- 000000000000000000000000000000000000000000000000000000000000002b - 896 -
-- 74657374696e677468697373686f756c6462657175697465616269746c6f6e67 - 928 -
-- 65727468616e31776f7264000000000000000000000000000000000000000000 - 960 -
-- 0000000000000000000000000000000000000000000000000000000000000000 - 992 -
-- 0000000000000000000000000000000000000000000000000000000000000007 - 1024 -
-- 73686f7274657200000000000000000000000000000000000000000000000000 - 1056 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 1088 -
-- 7300000000000000000000000000000000000000000000000000000000000000 - 1120 -
--
--
--
--
-- testFall3_raw_data
--
-- Pointers to Structs, when they each have Dynamic values in them ?
-- 0000000000000000000000000000000000000000000000000000000000000040 - 0 - Struct1 pointer (64)
-- 0000000000000000000000000000000000000000000000000000000000000100 - 32 - Struct2 pointer (256)
-- 0000000000000000000000000000000000000000000000000000000000000001 - 64 (0) - Struct1 element 1 - bool
-- 0000000000000000000000000000000000000000000000000000000000000040 - 96 (32) - Struct1 element 2 - pointer to uint[] (64)
-- 0000000000000000000000000000000000000000000000000000000000000003 - 128 (64) - Struct1 - uint[] length value of 3
-- 0000000000000000000000000000000000000000000000000000000000000001 - 160 (96) - Struct1 - uint[0]
-- 0000000000000000000000000000000000000000000000000000000000000002 - 192 (128) - Struct1 - uint[1]
-- 0000000000000000000000000000000000000000000000000000000000000003 - 224 (160) - Struct1 - uint[2]
-- 0000000000000000000000000000000000000000000000000000000000000040 - 256 (0) - Struct2 element 2 - pointer to address[] (64)
-- ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c - 288 (32) - Struct2 element 2
-- 0000000000000000000000000000000000000000000000000000000000000003 - 320 (64) - Struct2 - address[] length value of 3
-- 0000000000000000000000005e72914535f202659083db3a02c984188fa26e9f - 352 (96) - Struct2 - address[0]
-- 0000000000000000000000000000000000000000000000000000000123123123 - 384 (128) - Struct2 - address[1]
-- 0000000000000000000000005e72914535f202659083db3a02c984188fa26e9f - 416 (160) - Struct2 - address[2]
--
--
-- First 2 words are a Struct[s], the third word is a pointer to a Struct[d]
-- 0000000000000000000000000000000000000000000000000000000000000001 - 0 -
-- 000000000000000000000000000000000000000000000000000000000000002a - 32 -
-- 0000000000000000000000000000000000000000000000000000000000000060 - 64 -
-- 0000000000000000000000000000000000000000000000000000000000000080 - 96 -
-- ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c - 128 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 160 -
-- 000000000000000000000000000000000000000000000000000000000000002a - 192 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 224 -
-- 000000000000000000000000bbf289d846208c16edc8474705c748aff07732db - 256 -
-- 0000000000000000000000000000000000000000000000000000000123123123 - 288 -
-- 000000000000000000000000bbf289d846208c16edc8474705c748aff07732db - 320 -
--
--
-- Pointers to Structs, when they each have Dynamic values in them ?
-- 0000000000000000000000000000000000000000000000000000000000000040 - 0 - pointer
-- 0000000000000000000000000000000000000000000000000000000000000100 - 32 - pointer
-- 0000000000000000000000000000000000000000000000000000000000000001 - 64 -
-- 0000000000000000000000000000000000000000000000000000000000000040 - 96 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 128 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 160 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 192 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 224 -
-- 0000000000000000000000000000000000000000000000000000000000000060 - 256 -
-- ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c - 288 -
-- 00000000000000000000000000000000000000000000000000000000000000e0 - 320 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 352 -
-- 0000000000000000000000000dcd2f752394c41875e259e00bb44fd505297caf - 384 -
-- 0000000000000000000000000000000000000000000000000000000123123123 - 416 -
-- 0000000000000000000000000dcd2f752394c41875e259e00bb44fd505297caf - 448 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 480 -
-- 0000000000000000000000000000000000000000000000000000000000000040 - 512 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 544 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 576 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 608 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 640 -
--
--
-- First three words are a Struct[s], 4th and 5th words are pointers to Struct[d]
-- But Struct2 is supposed to contain StructOne{bool; uint[];}
-- 0000000000000000000000000000000000000000000000000000000000000009 - 0 - Struct3
-- 0000000000000000000000000000000000000000000000000000000000000001 - 32 - Struct3
-- 0000000000000000000000005e72914535f202659083db3a02c984188fa26e9f - 64 - Struct3
-- 00000000000000000000000000000000000000000000000000000000000000a0 - 96 - Struct1 (160)
-- 0000000000000000000000000000000000000000000000000000000000000160 - 128 - Struct2 (352)
-- 0000000000000000000000000000000000000000000000000000000000000001 - 160 - Struct1 bool
-- 0000000000000000000000000000000000000000000000000000000000000040 - 192 - Struct1 uint[] pointer
-- 0000000000000000000000000000000000000000000000000000000000000003 - 224 - Struct1 uint[] length
-- 0000000000000000000000000000000000000000000000000000000000000001 - 256 - Struct1 uint[0]
-- 0000000000000000000000000000000000000000000000000000000000000002 - 288 - Struct1 uint[1]
-- 0000000000000000000000000000000000000000000000000000000000000003 - 320 - Struct1 uint[2]
-- 0000000000000000000000000000000000000000000000000000000000000060 - 352 - Struct2 address[] pointer (96)
-- ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9c - 384 - Struct2 int
-- 00000000000000000000000000000000000000000000000000000000000000e0 - 416 - Struct2 StructOne pointer (224)
-- 0000000000000000000000000000000000000000000000000000000000000003 - 448 (96) - Struct2 address[] length
-- 0000000000000000000000005e72914535f202659083db3a02c984188fa26e9f - 480 - Struct2 address[0]
-- 0000000000000000000000000000000000000000000000000000000123123123 - 512 - Struct2 address[1]
-- 0000000000000000000000005e72914535f202659083db3a02c984188fa26e9f - 544 - Struct2 address[2]
-- 0000000000000000000000000000000000000000000000000000000000000001 - 576 (224) -
-- 0000000000000000000000000000000000000000000000000000000000000040 - 608 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 640 -
-- 0000000000000000000000000000000000000000000000000000000000000001 - 672 -
-- 0000000000000000000000000000000000000000000000000000000000000002 - 704 -
-- 0000000000000000000000000000000000000000000000000000000000000003 - 736 -
--
--
-- StructThree public structThree = StructThree(9, true, address(this));
-- StructOne public structOne = StructOne(true, uintListVal);
-- StructTwo public structTwo = StructTwo(addressList, -100, structOne);
--
-- uint[] public uintListVal = [1, 2, 3];
-- address[] addressList = [address(this), address(0x123123123), address(this)];
--
-- struct StructThree {
--     uint aaa;
--     bool bbb;
--     address ccc;
-- }
--
-- struct StructOne {
--     bool structBool;
--     uint[] structUint;
-- }
--
-- struct StructTwo {
--     address[] structDynArray;
--     int structInt;
--     StructOne structOne;
-- }
--
-- function test3 () public view returns (
--     StructThree memory,
--     StructOne memory,
--     StructTwo memory
-- )
--
-- Notes on Structs 3/1/19
--
-- First, on Struct Pointers:
-- Say you have a function which returns multiple Structs. Struct[d] has dynamic values, like and array,
-- and Struct[s] has only static values like bool, and uint.
-- If you return a Struct[s], the first word in the call data will be the first item in that struct.
-- If you return a Stuct[d], the first word in the call data will be a pointer to the struct data.
-- Why point to structs? Pointers are for dynamic data.
--
-- Second, on Missing data on generated function from public Struct:
-- Data appeared to be missing, for instance the uint[] of StructOne was missing when calling structOne()
-- only the first bool value was shown. And when calling structThree() the first address[] data was missing, BUT...
-- the int and StructOne data was there, including the uint[] data within StructOne
-- All of the data appeared to show up when calling test3(), which returns (StructThree, StructOne, StructTwo)
